---
import { type CollectionEntry, getCollection } from "astro:content";
import Default from "@layouts/Default.astro";
import { Icon } from "astro-icon/components";
import { SEO } from "astro-seo";

export const prerender = true;

interface Props {
  entry: CollectionEntry<"projects">;
}

function linkInstagramUsernames(text: string) {
  if (!text) return "";
  return text.replace(/@([a-zA-Z0-9_.]+)/g, (_, username) => {
    return `<a class="link" href="https://www.instagram.com/${username}" target="_blank">@${username}</a>`;
  });
}

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((entry: { id: any }) => ({
    params: { id: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { data } = entry;

// Transform local image paths to R2 API URLs
const r2Images = data.images.map((imagePath: string) => {
  const parts = imagePath.split('/');
  const projectName = parts[parts.length - 2]; // e.g., "20250426-Loop events"
  const imageName = parts[parts.length - 1]; // e.g., "20250426-Loop events_1.jpg"
  return `/api/images/${projectName}/${imageName}`;
});

const r2HeroImage = (() => {
  const parts = data.heroImage.split('/');
  const projectName = parts[parts.length - 2];
  const imageName = parts[parts.length - 1];
  return `/api/images/${projectName}/${imageName}`;
})();


function formatDate(date: number | Date) {
  const options = {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  } as const;
  return new Intl.DateTimeFormat("it-IT", options).format(date);
}

const absoluteImageUrl = new URL(r2HeroImage, Astro.site).toString();
---

<Default>
  <SEO
    slot="head"
    openGraph={{
      basic: {
        title: data.title,
        type: "website",
        image: absoluteImageUrl,
      },
      optional: {
        description: data.credit,
      },
      image: {
        alt: data.title,
      },
    }}
  />

  <a href="/projects" class="btn btn-neutral text-xl"><Icon name="material-symbols:arrow-back" /> Altri Progetti</a>
  <div class="flex flex-col items-center justify-center m-4">
    <div class="card card-border border-base-300 m-6 bg-base-100">
      <figure>
        <div class="aspect-video">
          <img src={r2HeroImage} alt={data.title} class="rounded-t-box object-cover w-full h-full" loading="lazy" />
        </div>
      </figure>
      <div class="card-body">
        <h2 class="card-title">
          {data.title}
        </h2>
        <div class="badge badge-secondary">{formatDate(data.pubDate)}</div>
        <p set:html={linkInstagramUsernames(data.credit)} />
        <p set:html={linkInstagramUsernames(data.colorCorrection ?? "")} />
        <p set:html={linkInstagramUsernames(data.editing ?? "")} />
      </div>
    </div>
  </div>

  <div class="flex flex-col items-center justify-center mt-4">
    <div class="pswp-gallery grid grid-cols-1 min-[355px]:grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 auto-rows-[120px]" id="gallery">
      {
        r2Images.map((imageSrc: string) => (
          <a href={imageSrc}>
            <div class="block w-44 h-full aspect-video">
              <img src={imageSrc} alt={data.title} class="rounded-btn object-cover h-full w-full" width="176" loading="lazy" />
            </div>
          </a>
        ))
      }
    </div>
  </div>
</Default>

<script>
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import "photoswipe/style.css";

  const lightbox = new PhotoSwipeLightbox({
    gallery: "#gallery",
    children: "a",
    pswpModule: () => import("photoswipe"),
    wheelToZoom: true,
    pinchToClose: false,
  });

  lightbox.init();
</script>
